import pandas as pd
import os
import re
from difflib import SequenceMatcher

# Load data
current_dir = os.path.dirname(os.path.abspath(__file__))
csv_path = os.path.join(current_dir, "hangout_info.csv")
df = pd.read_csv(csv_path)

# Corpus definitions
question_greeting_corpus = [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏á‡∏±‡∏ö",
    "‡∏ß‡πà‡∏≤‡πÑ‡∏á",
    "‡∏´‡∏∑‡∏°‡∏°‡∏°",
    "‡∏î‡∏µ",
    "‡∏î‡∏µ‡∏à‡πâ‡∏≤",
    "‡πÑ‡∏á",
    "‡πÇ‡∏¢‡πà‡∏ß",
    "hello",
    "hi",
]
question_hangout_corpus = [
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
    "‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏¥‡∏•",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏∑‡πà‡∏°",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏î‡∏µ",
    "‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
    "hangout",
    "bar",
    "pub",
]
question_ranking_corpus = [
    "‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡πà‡∏≤‡πÑ‡∏õ",
    "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
    "ranking",
    "best",
    "top",
]
question_location_corpus = [
    "‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
    "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏á",
    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
    "‡∏Ç‡∏≠‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô",
    "‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î",
    "location",
    "address",
    "where",
]
question_recommend_corpus = ["‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "recommend", "suggest"]


def simple_text_similarity(text1, text2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢ string matching"""
    return SequenceMatcher(None, text1.lower(), text2.lower()).ratio()


def find_best_match(user_input, corpus):
    """‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô corpus"""
    user_input = user_input.lower()
    best_score = 0
    best_match = None

    for item in corpus:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏´‡∏°
        if item.lower() in user_input:
            return item, 1.0

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á
        score = simple_text_similarity(user_input, item)
        if score > best_score:
            best_score = score
            best_match = item

    return best_match, best_score


def classify_question(user_input):
    """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    user_input = user_input.lower()

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if any(word in user_input for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏ß‡πà‡∏≤‡πÑ‡∏á", "‡∏î‡∏µ", "hello", "hi"]):
        return "greeting"
    elif any(
        word in user_input
        for word in ["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "ranking", "best", "top"]
    ):
        return "ranking"
    elif any(
        word in user_input
        for word in ["‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", "location", "address", "where"]
    ):
        return "location"
    elif any(word in user_input for word in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "recommend", "suggest"]):
        return "recommend"
    elif any(
        word in user_input for word in ["‡∏£‡πâ‡∏≤‡∏ô", "‡πÄ‡∏´‡∏•‡πâ‡∏≤", "‡∏î‡∏∑‡πà‡∏°", "hangout", "bar", "pub"]
    ):
        return "hangout"
    else:
        return "unknown"


def handle_greeting():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢"""
    return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå üçª\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏î‡∏µ\n‚Ä¢ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢"


def handle_hangout_question(user_input=None):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå"""
    if df.empty:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡πà‡∏° 3 ‡∏£‡πâ‡∏≤‡∏ô
    sample_shops = df.sample(min(3, len(df)))

    response = "üçª ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå:\n\n"
    for idx, row in sample_shops.iterrows():
        response += f"üìç {row.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n"
        response += f"   üìç {row.get('location', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')}\n"
        if "rating" in row and pd.notna(row["rating"]):
            response += f"   ‚≠ê {row['rating']}\n"
        response += "\n"

    return response


def handle_ranking_question():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"""
    if df.empty:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° rating ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if "rating" in df.columns:
        top_shops = df.nlargest(5, "rating")
    else:
        top_shops = df.head(5)

    response = "üèÜ Top ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå:\n\n"
    for idx, (_, row) in enumerate(top_shops.iterrows(), 1):
        response += f"{idx}. {row.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n"
        response += f"   üìç {row.get('location', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')}\n"
        if "rating" in row and pd.notna(row["rating"]):
            response += f"   ‚≠ê {row['rating']}\n"
        response += "\n"

    return response


def handle_location_question(user_input):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"""
    if df.empty:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    shop_found = None
    for _, row in df.iterrows():
        shop_name = row.get("name", "")
        if shop_name and shop_name.lower() in user_input.lower():
            shop_found = row
            break

    if shop_found is not None:
        response = f"üìç {shop_found.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n"
        response += f"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {shop_found.get('location', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')}\n"
        if "rating" in shop_found and pd.notna(shop_found["rating"]):
            response += f"‚≠ê {shop_found['rating']}\n"
        return response
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        response = "üìç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n"
        for _, row in df.head(5).iterrows():
            response += f"‚Ä¢ {row.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n"
            response += f"  üìç {row.get('location', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')}\n\n"
        return response


def chat_answer(user_input):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    if not user_input or not user_input.strip():
        return "‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ü§î"

    question_type = classify_question(user_input)

    if question_type == "greeting":
        return handle_greeting()
    elif question_type == "hangout":
        return handle_hangout_question(user_input)
    elif question_type == "ranking":
        return handle_ranking_question()
    elif question_type == "location":
        return handle_location_question(user_input)
    elif question_type == "recommend":
        return handle_hangout_question(user_input)
    else:
        return "‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ ü§î\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π:\n‚Ä¢ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏î‡∏µ\n‚Ä¢ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢"


# Test function
if __name__ == "__main__":
    test_questions = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏î‡∏µ", "‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢"]

    for q in test_questions:
        print(f"Q: {q}")
        print(f"A: {chat_answer(q)}")
        print("-" * 50)
