from flask import Flask, request, abort
from linebot.v3.messaging import (
    MessagingApi,
    Configuration,
    ApiClient,
    ReplyMessageRequest,
    TextMessage,
)
from linebot.v3.webhook import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from dotenv import load_dotenv
from pyngrok import ngrok
import json
import os
from logical import chat_answer

load_dotenv()

app = Flask(__name__)

ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
SECRET = os.getenv("SECRET")

if not ACCESS_TOKEN or not SECRET:
    print("‚ö†Ô∏è  ACCESS_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ SECRET ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env")
    exit(1)

configuration = Configuration(access_token=ACCESS_TOKEN)
api_client = ApiClient(configuration)
line_bot_api = MessagingApi(api_client)
handler = WebhookHandler(SECRET)

print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î ACCESS_TOKEN ‡πÅ‡∏•‡∏∞ SECRET ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


@app.route("/", methods=["POST"])
def linebot():
    body = request.get_data(as_text=True)
    signature = request.headers.get("X-Line-Signature", "")

    # ‡∏Å‡∏£‡∏ì‡∏µ LINE Verify Webhook (‡πÑ‡∏°‡πà‡∏°‡∏µ signature)
    if not signature:
        print("üìù LINE Verify Webhook - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 200 OK")
        return "OK", 200

    print(f"üì® ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: signature={signature[:20]}...")

    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
        handler.handle(body, signature)

        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        json_data = json.loads(body)
        events = json_data.get("events", [])

        if not events:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ events ‡πÉ‡∏ô request")
            return "OK", 200

        event = events[0]

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text message ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (
            event.get("type") != "message"
            or event.get("message", {}).get("type") != "text"
        ):
            print("‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text message - ‡∏Ç‡πâ‡∏≤‡∏°")
            return "OK", 200

        msg = event["message"]["text"]
        tk = event["replyToken"]

        print(f"üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {msg}")

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ chatbot logic
        reply_msg = chat_answer(msg) if msg else "‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à"

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        line_bot_api.reply_message(
            ReplyMessageRequest(replyToken=tk, messages=[TextMessage(text=reply_msg)])
        )

        print(f"‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {reply_msg[:50]}...")

    except InvalidSignatureError:
        print("‚ùå Invalid signature")
        abort(403)

    except Exception as e:
        print(f"‚ùå Error: {e}")
        print(f"   Body: {body}")

    return "OK", 200


if __name__ == "__main__":
    try:
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LINE ChatBot...")

        # ‡πÄ‡∏õ‡∏¥‡∏î ngrok tunnel
        public_url = ngrok.connect(3000)
        print(f"üåê Ngrok URL: {public_url}")
        print("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô LINE Developer Console (Webhook URL)")
        print("üìç ‡∏Å‡∏î Verify ‡πÅ‡∏•‡∏∞ Use webhook ‡πÉ‡∏ô LINE Console")
        print("-" * 60)

        # ‡∏£‡∏±‡∏ô Flask app
        app.run(host="0.0.0.0", port=3000, debug=False)

    except KeyboardInterrupt:
        print("\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
