from flask import Flask, request, abort
from linebot.v3.messaging import (
    MessagingApi,
    Configuration,
    ApiClient,
    ReplyMessageRequest,
    TextMessage,
)
from linebot.v3.webhook import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
import json
import os
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏ò‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import logical_simple.py
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from logical_simple import chat_answer

app = Flask(__name__)

# ‡πÉ‡∏ä‡πâ environment variables ‡∏à‡∏≤‡∏Å Vercel
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
SECRET = os.getenv("SECRET")

if not ACCESS_TOKEN or not SECRET:
    print("‚ö†Ô∏è  ACCESS_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ SECRET ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡πÉ‡∏ô Vercel")

configuration = Configuration(access_token=ACCESS_TOKEN)
api_client = ApiClient(configuration)
line_bot_api = MessagingApi(api_client)
handler = WebhookHandler(SECRET)


@app.route("/", methods=["GET"])
def home():
    return "LINE ChatBot is running on Vercel!", 200


@app.route("/", methods=["POST"])
def linebot():
    body = request.get_data(as_text=True)
    signature = request.headers.get("X-Line-Signature", "")

    # ‡∏Å‡∏£‡∏ì‡∏µ LINE Verify Webhook (‡πÑ‡∏°‡πà‡∏°‡∏µ signature)
    if not signature:
        print("üìù LINE Verify Webhook - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 200 OK")
        return "OK", 200

    print(f"üì® ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: signature={signature[:20]}...")

    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
        handler.handle(body, signature)

        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        json_data = json.loads(body)
        events = json_data.get("events", [])

        if not events:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ events ‡πÉ‡∏ô request")
            return "OK", 200

        event = events[0]

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text message ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (
            event.get("type") != "message"
            or event.get("message", {}).get("type") != "text"
        ):
            print("‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text message - ‡∏Ç‡πâ‡∏≤‡∏°")
            return "OK", 200

        msg = event["message"]["text"]
        tk = event["replyToken"]

        print(f"üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {msg}")

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ chatbot logic
        reply_msg = chat_answer(msg) if msg else "‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à"

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        line_bot_api.reply_message(
            ReplyMessageRequest(replyToken=tk, messages=[TextMessage(text=reply_msg)])
        )

        print(f"‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {reply_msg[:50]}...")

    except InvalidSignatureError:
        print("‚ùå Invalid signature")
        abort(403)

    except Exception as e:
        print(f"‚ùå Error: {e}")
        print(f"   Body: {body}")

    return "OK", 200


# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
def handler_func(request):
    with app.test_request_context(
        request.path, method=request.method, headers=request.headers, data=request.data
    ):
        return app.full_dispatch_request()


# Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
app = app
