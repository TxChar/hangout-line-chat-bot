import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer, util
import torch

# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ CPU ‡πÅ‡∏ó‡∏ô MPS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á tensor conversion error
device = "cpu"
if torch.cuda.is_available():
    device = "cuda"

model = SentenceTransformer(
    "sentence-transformers/distiluse-base-multilingual-cased-v2", device=device
)

# Load data
df = pd.read_csv("hangout_info.csv")

# Corpus definitions
question_greeting_corpus = [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏á‡∏±‡∏ö",
    "‡∏ß‡πà‡∏≤‡πÑ‡∏á",
    "‡∏´‡∏∑‡∏°‡∏°‡∏°...",
    "‡∏î‡∏µ",
    "‡∏î‡∏µ‡∏à‡πâ‡∏≤",
    "‡πÑ‡∏á",
    "‡πÇ‡∏¢‡πà‡∏ß",
]
question_hangout_corpus = [
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
    "‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏¥‡∏•",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏∑‡πà‡∏°",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏î‡∏µ",
    "‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
]
question_ranking_corpus = ["‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡πà‡∏≤‡πÑ‡∏õ", "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"]
question_location_corpus = [
    "‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
    "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏á",
    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
    "‡∏Ç‡∏≠‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô",
    "‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î",
]
question_recommend_corpus = [
    "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
    "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ",
    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≤‡πÑ‡∏õ",
    "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
    "‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠",
    "‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
]
question_detail_corpus = [
    "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
    "‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
    "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤",
    "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô",
    "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
]
question_stores_corpus = [
    "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô",
    "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
    "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
]
agree_term = ["‡πÉ‡∏ä‡πà", "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "‡∏ä‡πà‡∏≤‡∏¢", "‡∏ï‡πâ‡∏≠‡∏á"]
disagree_term = ["‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "‡∏°‡πà‡∏≤‡∏¢", "‡πÑ‡∏°‡πà"]
cancle_corpus = ["‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"]
question_thinking_corpus = agree_term + disagree_term
asking_thank_corpus = [
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏à‡πâ‡∏≤",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏≤‡∏ö",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏≤",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞",
    "‡πÅ‡∏ï‡πâ‡∏á‡∏à‡πâ‡∏≤",
    "‡πÅ‡∏ï‡πâ‡∏á",
    "‡∏Ç‡∏≠‡∏ö‡∏à‡πâ‡∏≤",
    "‡∏ö‡∏≤‡∏¢‡πÜ",
    "‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà",
]
asking_hangout_corpus = [
    "‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
    "‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏ï‡∏∏‡∏à‡∏Å‡∏£",
    "‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏Å‡∏£",
    "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
]
asking_corpus = asking_hangout_corpus + question_detail_corpus + question_stores_corpus
combined_question_corpus = (
    cancle_corpus
    + asking_thank_corpus
    + question_greeting_corpus
    + question_hangout_corpus
    + question_ranking_corpus
    + question_location_corpus
    + question_recommend_corpus
    + question_thinking_corpus
    + question_detail_corpus
    + question_stores_corpus
)

user_input = []


def calculate_similarity_score(question, corpus):
    question_vec = model.encode(
        question, convert_to_tensor=True, normalize_embeddings=True
    )
    corpus_vec = model.encode(corpus, convert_to_tensor=True, normalize_embeddings=True)
    cosine_scores = util.cos_sim(question_vec, corpus_vec)

    # ‡πÅ‡∏õ‡∏•‡∏á tensor ‡πÄ‡∏õ‡πá‡∏ô numpy array ‡∏ö‡∏ô CPU
    if hasattr(cosine_scores, "cpu"):
        entity_vector = cosine_scores.cpu().numpy()
    else:
        entity_vector = np.array(cosine_scores)

    score = np.max(entity_vector)
    if score >= 0.6:
        match_entity = corpus[np.argmax(entity_vector)]
        return [match_entity, score]
    else:
        return [
            f"‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (T_T) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤",
            score,
        ]


def greeting_filtering(input):
    ans = ""
    if input in question_greeting_corpus:
        ans = (
            input + "‡∏ñ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö (‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£)‡∏´‡∏£‡∏∑‡∏≠(‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ !üçª"
        )
    elif input in question_hangout_corpus:
        ans = (
            input
            + "‡∏´‡∏≤‡∏Å‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
        )
    return ans


def store_ranking_filtering(input):
    answer_sentence = ""
    if input in asking_hangout_corpus:
        answer_sentence = "‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£(‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô)‡∏´‡∏£‡∏∑‡∏≠(‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô)?"
    elif input in question_stores_corpus:
        hangout_ans_df = df[["‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"]].to_dict(orient="records")
        answer_sentence += f"‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î \n"
        answer_sentence += "\n"
        for i in range(len(hangout_ans_df)):
            for key, value in hangout_ans_df[i].items():
                answer_sentence += f"‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà {i+1} : {value}" + "\n"
        answer_sentence += "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
    elif input in question_detail_corpus:
        hangout_ans_df = df.to_dict(orient="records")
        answer_sentence += f"‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô \n"
        answer_sentence += "\n"
        for i in range(len(hangout_ans_df)):
            for key, value in hangout_ans_df[i].items():
                answer_sentence += f"{key} : {value}" + "\n"
            answer_sentence += "\n"
        answer_sentence += "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
    return answer_sentence


def recommendation(input):
    message = "‡πÑ‡∏°‡∏ó‡∏£‡∏≤‡∏ö"
    if input in question_recommend_corpus:
        user_input.clear()
        message = "üåÉ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏´‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"
    elif input in question_thinking_corpus:
        if input in agree_term:
            input = "‡πÉ‡∏ä‡πà"
        elif input in disagree_term:
            input = "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"
        user_input.append(input)
        len_user_input = len(user_input)
        if len_user_input == 1:
            message = "üöó ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÑ‡∏´‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"
        elif len_user_input == 2:
            message = "üìû ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"
        elif len_user_input == 3:
            message = store(user_input)
        else:
            message = "üò´‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤"
            user_input.clear()
    return message


def store(input):
    late_input = input[0]
    parking_input = input[1]
    contact_input = input[2]
    store_dataframe = df.copy()
    if late_input == "‡πÉ‡∏ä‡πà":
        store_dataframe = store_dataframe[store_dataframe["‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ"] == "‡πÉ‡∏ä‡πà"]
    elif late_input == "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà":
        store_dataframe = store_dataframe[store_dataframe["‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ"] == "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"]
    if parking_input == "‡πÉ‡∏ä‡πà":
        store_dataframe = store_dataframe[store_dataframe["‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô"] == "‡πÉ‡∏ä‡πà"]
    elif parking_input == "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà":
        store_dataframe = store_dataframe[store_dataframe["‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô"] == "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"]
    if contact_input == "‡πÉ‡∏ä‡πà":
        pass
    if contact_input == "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà":
        store_dataframe = store_dataframe.drop(
            columns=["‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"], errors="ignore"
        )
    store_dataframe = store_dataframe.drop(
        columns=["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ", "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô"], errors="ignore"
    )
    answer_sentence = ""
    hangout_ans_df = store_dataframe.to_dict(orient="records")
    len_hangout_ans = len(hangout_ans_df)
    if len_hangout_ans > 0:
        answer_sentence += f"‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (^_^)"
        answer_sentence += "\n\n"
        for i in range(len_hangout_ans):
            answer_sentence += f"‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà : {i+1}" + "\n"
            for key, value in hangout_ans_df[i].items():
                answer_sentence += f"{key} : {value}" + "\n"
            answer_sentence += "\n"
        answer_sentence += "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢üòô ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤‡∏≤!"
    else:
        answer_sentence += f"‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏°‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢"
        answer_sentence += "\n\n"
        answer_sentence += f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    return answer_sentence


def chat_answer(input):
    corpus = combined_question_corpus
    output_corpus = calculate_similarity_score(input, corpus)
    if input in asking_corpus:
        answer = store_ranking_filtering(input)
    elif output_corpus[0] in question_greeting_corpus:
        answer = greeting_filtering(output_corpus[0])
    elif output_corpus[0] in cancle_corpus:
        user_input.clear()
        answer = f"[‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!]‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏à‡πÇ‡∏•‡πÄ‡∏•‡πÑ‡∏°‡πà‡∏£‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏áüò≥üî• \n\n‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°(‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)‡∏´‡∏£‡∏∑‡∏≠(‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£)‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≤‡∏≤!!"
    elif output_corpus[0] in asking_thank_corpus:
        answer = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢üòô ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤‡∏≤!"
    elif output_corpus[0] in question_hangout_corpus:
        answer = greeting_filtering(output_corpus[0])
    elif output_corpus[0] in question_recommend_corpus:
        answer = recommendation(output_corpus[0])
    elif output_corpus[0] in question_thinking_corpus:
        answer = recommendation(output_corpus[0])
    else:
        answer = f"{input} ‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏àüò≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏ô‡πâ‡∏≠‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤"
    return answer
